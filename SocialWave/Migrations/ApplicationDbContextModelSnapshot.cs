// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SocialWave.Data;

#nullable disable

namespace SocialWave.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SocialWave.Models.AbstractClasses.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("PostType").HasValue("Post");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.Admiration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAdmiredId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserAdmirerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserAdmiredId");

                    b.HasIndex("UserAdmirerId");

                    b.ToTable("Admirations");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InvolvedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("WasSeen")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("InvolvedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.SavedPost", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("SavedPosts");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<byte[]>("PictureProfile")
                        .HasColumnType("bytea");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.PostWithImage", b =>
                {
                    b.HasBaseType("SocialWave.Models.AbstractClasses.Post");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasDiscriminator().HasValue("PostWithImage");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.PostWithoutImage", b =>
                {
                    b.HasBaseType("SocialWave.Models.AbstractClasses.Post");

                    b.HasDiscriminator().HasValue("PostWithoutImage");
                });

            modelBuilder.Entity("SocialWave.Models.AbstractClasses.Post", b =>
                {
                    b.HasOne("SocialWave.Models.ConcreteClasses.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.Admiration", b =>
                {
                    b.HasOne("SocialWave.Models.ConcreteClasses.User", "UserAdmired")
                        .WithMany()
                        .HasForeignKey("UserAdmiredId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialWave.Models.ConcreteClasses.User", "UserAdmirer")
                        .WithMany()
                        .HasForeignKey("UserAdmirerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserAdmired");

                    b.Navigation("UserAdmirer");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.Comment", b =>
                {
                    b.HasOne("SocialWave.Models.AbstractClasses.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("SocialWave.Models.ConcreteClasses.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.Like", b =>
                {
                    b.HasOne("SocialWave.Models.ConcreteClasses.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId");

                    b.HasOne("SocialWave.Models.AbstractClasses.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId");

                    b.HasOne("SocialWave.Models.ConcreteClasses.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.Notification", b =>
                {
                    b.HasOne("SocialWave.Models.ConcreteClasses.User", "InvolvedUser")
                        .WithMany()
                        .HasForeignKey("InvolvedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SocialWave.Models.ConcreteClasses.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvolvedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.SavedPost", b =>
                {
                    b.HasOne("SocialWave.Models.AbstractClasses.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SocialWave.Models.ConcreteClasses.User", "User")
                        .WithMany("SavedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.User", b =>
                {
                    b.HasOne("SocialWave.Models.ConcreteClasses.User", null)
                        .WithMany("Admirations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SocialWave.Models.AbstractClasses.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("SocialWave.Models.ConcreteClasses.User", b =>
                {
                    b.Navigation("Admirations");

                    b.Navigation("Posts");

                    b.Navigation("SavedPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
